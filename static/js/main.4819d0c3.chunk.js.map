{"version":3,"sources":["Constants.js","Cells.js","Game.js","App.js","serviceWorker.js","index.js"],"names":["CELL_SIZE","WIDTH","HEIGHT","console","log","Cell","_this$props","this","props","x","y","react_default","a","createElement","className","style","left","concat","Constants","top","width","height","React","Component","Game","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","cells","interval","isRunning","runGame","setState","runIteration","stopGame","timeoutHandler","window","clearTimeout","handleIntervalChange","event","target","value","handleClick","elemOffset","getElementOffset","offsetX","clientX","offsetY","clientY","Math","floor","cols","rows","board","makeCells","makeEmptyBoard","neighbors","dirs","i","length","dir","y1","x1","_this2","newBoard","calculateNeighbors","setTimeout","push","rect","boardRef","getBoundingClientRect","doc","document","documentElement","pageXOffset","clientLeft","pageYOffset","clientTop","_this3","_this$state","backgroundSize","onClick","ref","n","map","cell","Cells","key","onChange","App","src_Game_0","Boolean","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4819d0c3.chunk.js","sourcesContent":["export const CELL_SIZE = 20;\r\nexport const WIDTH = 800;\r\nexport const HEIGHT = 600;\r\n\r\nconsole.log(CELL_SIZE, WIDTH, HEIGHT);\r\n","import React from \"react\";\r\nimport * as Constants from \"./Constants\";\r\n\r\nclass Cell extends React.Component {\r\n  render() {\r\n    const { x, y } = this.props;\r\n    return (\r\n      <div\r\n        className=\"Cell\"\r\n        style={{\r\n          left: `${Constants.CELL_SIZE * x + 1}px`,\r\n          top: `${Constants.CELL_SIZE * y + 1}px`,\r\n          width: `${Constants.CELL_SIZE - 1}px`,\r\n          height: `${Constants.CELL_SIZE - 1}px`\r\n        }}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default Cell;\r\n","import React from \"react\";\nimport \"./Game.css\";\nimport * as Constants from \"./Constants\";\nimport Cell from \"./Cells\";\n\nclass Game extends React.Component {\n  constructor() {\n    super();\n    this.rows = Constants.HEIGHT / Constants.CELL_SIZE;\n    this.cols = Constants.WIDTH / Constants.CELL_SIZE;\n    this.board = this.makeEmptyBoard();\n    console.log(Constants.CELL_SIZE);\n  }\n\n  state = {\n    cells: [],\n    interval: 100,\n    isRunning: false\n  };\n\n  runGame = () => {\n    this.setState({ isRunning: true });\n    this.runIteration();\n  };\n\n  stopGame = () => {\n    this.setState({ isRunning: false });\n    if (this.timeoutHandler) {\n      window.clearTimeout(this.timeoutHandler);\n      this.timeoutHandler = null;\n    }\n  };\n\n  calculateNeighbors(board, x, y) {\n    let neighbors = 0;\n    const dirs = [\n      [-1, -1],\n      [-1, 0],\n      [-1, 1],\n      [0, 1],\n      [1, 1],\n      [1, 0],\n      [1, -1],\n      [0, -1]\n    ];\n    for (let i = 0; i < dirs.length; i++) {\n      const dir = dirs[i];\n      let y1 = y + dir[0];\n      let x1 = x + dir[1];\n\n      if (\n        x1 >= 0 &&\n        x1 < this.cols &&\n        y1 >= 0 &&\n        y1 < this.rows &&\n        board[y1][x1]\n      ) {\n        neighbors++;\n      }\n    }\n\n    return neighbors;\n  }\n\n  runIteration() {\n    let newBoard = this.makeEmptyBoard();\n\n    //Iteration logic\n    for (let y = 0; y < this.rows; y++) {\n      for (let x = 0; x < this.cols; x++) {\n        let neighbors = this.calculateNeighbors(this.board, x, y);\n        if (this.board[y][x]) {\n          if (neighbors === 2 || neighbors === 3) {\n            newBoard[y][x] = true;\n          } else {\n            newBoard[y][x] = false;\n          }\n        } else {\n          if (!this.board[y][x] && neighbors === 3) {\n            newBoard[y][x] = true;\n          }\n        }\n      }\n    }\n    ///////////\n\n    this.board = newBoard;\n    this.setState({ cells: this.makeCells() });\n\n    this.timeoutHandler = window.setTimeout(() => {\n      this.runIteration();\n    }, this.state.interval);\n  }\n\n  handleIntervalChange = event => {\n    this.setState({ interval: event.target.value });\n  };\n\n  //create an empty board\n  makeEmptyBoard() {\n    let board = [];\n    for (let y = 0; y < this.rows; y++) {\n      board[y] = [];\n      for (let x = 0; x < this.cols; x++) {\n        board[y][x] = false;\n      }\n    }\n    return board;\n  }\n\n  //create cells from this.board array\n  makeCells() {\n    let cells = [];\n    for (let y = 0; y < this.rows; y++) {\n      for (let x = 0; x < this.cols; x++) {\n        if (this.board[y][x]) {\n          cells.push({ x, y });\n        }\n      }\n    }\n    return cells;\n  }\n\n  //find out the relative location of click event\n  getElementOffset() {\n    const rect = this.boardRef.getBoundingClientRect();\n    const doc = document.documentElement;\n\n    return {\n      x: rect.left + window.pageXOffset - doc.clientLeft,\n      y: rect.top + window.pageYOffset - doc.clientTop\n    };\n  }\n  //handleCLick Event\n  handleClick = event => {\n    const elemOffset = this.getElementOffset();\n    const offsetX = event.clientX - elemOffset.x;\n    const offsetY = event.clientY - elemOffset.y;\n    console.log(offsetX);\n    const x = Math.floor(offsetX / Constants.CELL_SIZE);\n    const y = Math.floor(offsetY / Constants.CELL_SIZE);\n\n    if (x > 0 && x < this.cols && y >= 0 && y <= this.rows) {\n      console.log(x, y);\n      this.board[y][x] = !this.board[y][x];\n    }\n\n    this.setState({ cells: this.makeCells() });\n  };\n  render() {\n    const { cells, interval, isRunning } = this.state;\n    return (\n      <div>\n                <div className=\"Board\"\n                    style={{ width: Constants.WIDTH, height: Constants.HEIGHT, backgroundSize: `${Constants.CELL_SIZE}px ${Constants.CELL_SIZE}px`}}\n                    onClick={this.handleClick}\n                    ref={(n) => { this.boardRef = n; }}>\n\n                    {cells.map(cell => (\n                        <Cell x={cell.x} y={cell.y} key={`${cell.x},${cell.y}`}/>\n                    ))}\n                </div>\n        \n        <div className=\"controls\">\n          Update every{\" \"}\n          <input\n            value={this.state.interval}\n            onChange={this.handleIntervalChange}\n          />{\" \"}\n          msec{\" \"}\n          {isRunning ? (\n            <button className=\"button\" onClick={this.stopGame}>\n              Stop\n            </button>\n          ) : (\n            <button className=\"button\" onClick={this.runGame}>\n              Run\n            </button>\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Game;\n","import React, { Component } from 'react';\nimport './App.css';\nimport Game from \"./Game\";\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Game />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}